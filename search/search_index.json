{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Placeholder API \u00b6 It's a small, JIJ -able API that allows creation and parsing placeholders within strings and Minecraft Text Components. Placeholder API uses a simple format of %modid:type% or %modid:type data% ( %modid:type/data% prior to 1.19). It also includes simple, general usage text format indented for simplifying user input in configs/chats/etc. For users \u00b6 It allows users to configure multiple mods in similar way without losing compatibility between mods. Placeholders allow changing what and where any information is present within compatible mods. Additionally, Simplified Text Format allows to style them in readable way without the requirement of writing JSON manually or using generators. Using placeholders Default placeholder list Mod placeholder list Simplified Text Format For developers \u00b6 Usage of Placeholder API is a simple way to achieve good mod compatibility without having to implement multiple mod specific apis. Additionally, the placeholder parsing system can be used for replacing own static (or dynamic placeholders) in Text created by player or read from config. This with combination of Simplified Text Format allows creating great user/admin experience. Getting Started Adding placeholders Parsing placeholders Using Simplified Text Format/TextParser","title":"About Placeholder API"},{"location":"#about-placeholder-api","text":"It's a small, JIJ -able API that allows creation and parsing placeholders within strings and Minecraft Text Components. Placeholder API uses a simple format of %modid:type% or %modid:type data% ( %modid:type/data% prior to 1.19). It also includes simple, general usage text format indented for simplifying user input in configs/chats/etc.","title":"About Placeholder API"},{"location":"#for-users","text":"It allows users to configure multiple mods in similar way without losing compatibility between mods. Placeholders allow changing what and where any information is present within compatible mods. Additionally, Simplified Text Format allows to style them in readable way without the requirement of writing JSON manually or using generators. Using placeholders Default placeholder list Mod placeholder list Simplified Text Format","title":"For users"},{"location":"#for-developers","text":"Usage of Placeholder API is a simple way to achieve good mod compatibility without having to implement multiple mod specific apis. Additionally, the placeholder parsing system can be used for replacing own static (or dynamic placeholders) in Text created by player or read from config. This with combination of Simplified Text Format allows creating great user/admin experience. Getting Started Adding placeholders Parsing placeholders Using Simplified Text Format/TextParser","title":"For developers"},{"location":"dev/adding-placeholders/","text":"Adding placeholders \u00b6 Creation of new placeholders is simple. You just need to import eu.pb4.placeholders.api.Placeholders and call static register method. You only need to provide 2 arguments: Identifier with your mod id as namespace and path as argument name (with one additional limitation being not allowed to use / in it). A function (in form of lambda for example) that takes PlaceholderContext and nullable string argument, returns PlaceholderResult, Example Java Kotlin 1 2 3 4 Placeholders . register ( new Identifier ( \"example\" , \"placeholder\" ), ( ctx , arg ) -> PlaceholderResult . value ( Text . literal ( \"Hello World!\" )) ); 1 2 3 Placeholders . register ( Identifier ( \"example\" , \"placeholder\" )) { ctx , arg -> PlaceholderResult . value ( Text . literal ( \"Hello World!\" )) } Using the context \u00b6 PlaceholderContext object passed to placeholder contains allows retrieving the server, the ServerCommandSource , the source world (if exist), the source ServerPlayerEntity (if exist), the source Entity (if exists), and the source's GameProfile (if exists). It also includes few methods for checking if they are present, such as hasWorld() , hasPlayer() , hasGameProfile() , and hasEntity() . Here is example for a placeholder, which requires a player: Java Kotlin 1 2 3 4 5 6 Placeholders . register ( new Identifier ( \"player\" , \"displayname\" ), ( ctx , arg ) -> { if ( ! ctx . hasPlayer ()) return PlaceholderResult . invalid ( \"No player!\" ); return PlaceholderResult . value ( ctx . getPlayer (). getDisplayName ()); }); 1 2 3 4 5 6 Placeholders . register ( Identifier ( \"player\" , \"displayname\" )) { ctx , args -> if ( ! ctx . hasPlayer ()) return PlaceholderResult . invalid ( \"No player!\" ) PlaceholderResult . value ( ctx . player !! . displayName ) } Arguments \u00b6 You can also add an argument to your placeholder, which removes requirement of mostly repeated placeholders and allows degree of customisation. Argument itself is a string, so you can parse it in any way. Java Kotlin 1 2 3 4 5 6 7 8 9 PlaceholderAPI . register ( new Identifier ( \"server\" , \"name_from_uuid\" ), ( ctx , arg ) -> { if ( arg == null ) return PlaceholderResult . invalid ( \"No argument!\" ); UUID uuid = UUID . fromString ( arg ); GameProfile player = ctx . server (). getUserCache (). getByUuid ( UUID . fromString ( arg )). get () return PlaceholderResult . value ( player . getName ())); }); 1 2 3 4 5 6 7 8 9 PlaceholderAPI . register ( Identifier ( \"server\" , \"name_from_uuid\" )) { ctx , arg -> if ( arg == null ) return PlaceholderResult . invalid ( \"No argument!\" ) val uuid = UUID . fromString ( arg ) val player = ctx . server (). userCache . getByUuid ( uuid ). get () return PlaceholderResult . value ( player . name ) } Returning correct value \u00b6 Placeholders need to return instance of PlaceholderResult. It can be created by usage of provided static methods on this class. If it was successful: PlaceholderResult . value ( Text text ) - Creates a value with text PlaceholderResult . value ( String text ) - Creates a value from string, by parsing it with TextParser If it was invalid (for example, no player or argument): PlaceholderResult . invalid () - Creates simple invalid result PlaceholderResult . invalid ( String reason ) -- Creates invalid result with a reason. The reason is returned as a response, but may be used further by other parsers.","title":"Adding placeholders"},{"location":"dev/adding-placeholders/#adding-placeholders","text":"Creation of new placeholders is simple. You just need to import eu.pb4.placeholders.api.Placeholders and call static register method. You only need to provide 2 arguments: Identifier with your mod id as namespace and path as argument name (with one additional limitation being not allowed to use / in it). A function (in form of lambda for example) that takes PlaceholderContext and nullable string argument, returns PlaceholderResult, Example Java Kotlin 1 2 3 4 Placeholders . register ( new Identifier ( \"example\" , \"placeholder\" ), ( ctx , arg ) -> PlaceholderResult . value ( Text . literal ( \"Hello World!\" )) ); 1 2 3 Placeholders . register ( Identifier ( \"example\" , \"placeholder\" )) { ctx , arg -> PlaceholderResult . value ( Text . literal ( \"Hello World!\" )) }","title":"Adding placeholders"},{"location":"dev/adding-placeholders/#using-the-context","text":"PlaceholderContext object passed to placeholder contains allows retrieving the server, the ServerCommandSource , the source world (if exist), the source ServerPlayerEntity (if exist), the source Entity (if exists), and the source's GameProfile (if exists). It also includes few methods for checking if they are present, such as hasWorld() , hasPlayer() , hasGameProfile() , and hasEntity() . Here is example for a placeholder, which requires a player: Java Kotlin 1 2 3 4 5 6 Placeholders . register ( new Identifier ( \"player\" , \"displayname\" ), ( ctx , arg ) -> { if ( ! ctx . hasPlayer ()) return PlaceholderResult . invalid ( \"No player!\" ); return PlaceholderResult . value ( ctx . getPlayer (). getDisplayName ()); }); 1 2 3 4 5 6 Placeholders . register ( Identifier ( \"player\" , \"displayname\" )) { ctx , args -> if ( ! ctx . hasPlayer ()) return PlaceholderResult . invalid ( \"No player!\" ) PlaceholderResult . value ( ctx . player !! . displayName ) }","title":"Using the context"},{"location":"dev/adding-placeholders/#arguments","text":"You can also add an argument to your placeholder, which removes requirement of mostly repeated placeholders and allows degree of customisation. Argument itself is a string, so you can parse it in any way. Java Kotlin 1 2 3 4 5 6 7 8 9 PlaceholderAPI . register ( new Identifier ( \"server\" , \"name_from_uuid\" ), ( ctx , arg ) -> { if ( arg == null ) return PlaceholderResult . invalid ( \"No argument!\" ); UUID uuid = UUID . fromString ( arg ); GameProfile player = ctx . server (). getUserCache (). getByUuid ( UUID . fromString ( arg )). get () return PlaceholderResult . value ( player . getName ())); }); 1 2 3 4 5 6 7 8 9 PlaceholderAPI . register ( Identifier ( \"server\" , \"name_from_uuid\" )) { ctx , arg -> if ( arg == null ) return PlaceholderResult . invalid ( \"No argument!\" ) val uuid = UUID . fromString ( arg ) val player = ctx . server (). userCache . getByUuid ( uuid ). get () return PlaceholderResult . value ( player . name ) }","title":"Arguments"},{"location":"dev/adding-placeholders/#returning-correct-value","text":"Placeholders need to return instance of PlaceholderResult. It can be created by usage of provided static methods on this class. If it was successful: PlaceholderResult . value ( Text text ) - Creates a value with text PlaceholderResult . value ( String text ) - Creates a value from string, by parsing it with TextParser If it was invalid (for example, no player or argument): PlaceholderResult . invalid () - Creates simple invalid result PlaceholderResult . invalid ( String reason ) -- Creates invalid result with a reason. The reason is returned as a response, but may be used further by other parsers.","title":"Returning correct value"},{"location":"dev/getting-started/","text":"Getting Started \u00b6 To begin, you need to add Nucleoid's maven to your build file. Groovy Kotlin build.gradle 1 2 3 4 5 6 7 repositories { // There might be other repos there too, just add it at the end maven { url \"https://maven.nucleoid.xyz/\" name \"Nucleoid\" } } build.gradle.kts 1 2 3 4 repositories { // There might be other repos there too, just add it at the end maven ( \"https://maven.nucleoid.xyz/\" ) { name = \"Nucleoid\" } } Then you just declare it as dependency! Info You just need to replace [VERSION] with version you want to use (which should be usually the latest available). For list of version names, you can check maven Groovy Kotlin build.gradle 1 2 3 4 5 dependencies { // You will have other dependencies here too modImplementation include ( \"eu.pb4:placeholder-api:[VERSION]\" ) } build.gradle.kts 1 2 3 4 5 dependencies { // You will have other dependencies here too modImplementation ( include ( \"eu.pb4:placeholder-api:[VERSION]\" )) } This will also include it in yours mods, so users won't need to download it separately. You just need to replace [VERSION] with the version you want to use (which should be usually the latest available). For list of version names, you can check Maven Repository","title":"Getting Started"},{"location":"dev/getting-started/#getting-started","text":"To begin, you need to add Nucleoid's maven to your build file. Groovy Kotlin build.gradle 1 2 3 4 5 6 7 repositories { // There might be other repos there too, just add it at the end maven { url \"https://maven.nucleoid.xyz/\" name \"Nucleoid\" } } build.gradle.kts 1 2 3 4 repositories { // There might be other repos there too, just add it at the end maven ( \"https://maven.nucleoid.xyz/\" ) { name = \"Nucleoid\" } } Then you just declare it as dependency! Info You just need to replace [VERSION] with version you want to use (which should be usually the latest available). For list of version names, you can check maven Groovy Kotlin build.gradle 1 2 3 4 5 dependencies { // You will have other dependencies here too modImplementation include ( \"eu.pb4:placeholder-api:[VERSION]\" ) } build.gradle.kts 1 2 3 4 5 dependencies { // You will have other dependencies here too modImplementation ( include ( \"eu.pb4:placeholder-api:[VERSION]\" )) } This will also include it in yours mods, so users won't need to download it separately. You just need to replace [VERSION] with the version you want to use (which should be usually the latest available). For list of version names, you can check Maven Repository","title":"Getting Started"},{"location":"dev/parsing-placeholders/","text":"Parsing placeholders \u00b6 There are few ways (and types) of placeholders you can parse with PlaceholderAPI. So depending on your use case some of these will be more useful than others. Placeholder Context \u00b6 Placeholders should be provided with a context at all times. The context allows the placeholder parser to inject placeholders that require an optional context, such as a player. A PlaceholderContext is created using one of the PlaceholderContext.of(...) variants. Depending on the objects passed, different placeholders may be available. PlaceholderContext.of(...) Variants MinecraftServer May use placeholders that depend on the server May use placeholders that depend on ServerCommandSource (Note: uses the command source from MinecraftServer.getCommandSource() ) GameProfile May use placeholders that depend on the server May use placeholders that depend on ServerCommandSource (Note: creates a new dummy command source at (0,0,0) ) May use placeholders that depend on GameProfile ServerPlayerEntity May use placeholders that depend on the server May use placeholders that depend on ServerCommandSource May use placeholders that depend on ServerWorld May use placeholders that depend on ServerPlayerEntity May use placeholders that depend on Entity May use placeholders that depend on GameProfile ServerCommandSource May use placeholders that depend on the server May use placeholders that depend on ServerCommandSource May use placeholders that depend on ServerWorld May use placeholders that depend on ServerPlayerEntity only if the source has a player May use placeholders that depend on Entity only if the source has an entity May use placeholders that depend on GameProfile only if the source has a player Entity May use placeholders that depend on the server May use placeholders that depend on ServerCommandSource May use placeholders that depend on ServerWorld May use placeholders that depend on ServerPlayerEntity only if the source has a player May use placeholders that depend on Entity May use placeholders that depend on GameProfile only if the source has a player Parsing global placeholders \u00b6 Parsing global placeholders is really simple, as long as you have access to ServerPlayerEntity or MinecraftServer object. You just need to simply import eu.pb4.placeholders.api.Placeholders and call parseText . This method will return fully parsed Text, which can be displayed to the user. Example Java Kotlin 1 Text message = Placeholders . parseText ( textInput , PlaceholderContext . of (...)); 1 val message = Placeholders . parseText ( textInput , PlaceholderContext . of (...)) Placeholders itself will use default formatting of %category:placeholder% . If you want to use other formatting for them (which is recommended), you can use parseText(Text, PlaceholderContext, Pattern) . Prefer those listed in Preferred Patterns for static . Parsing own/custom/predefined placeholders \u00b6 If you want to parse your own placeholders, you can do this in 2 ways. Static placeholders \u00b6 To parse static placeholders you need to create a Map with String as a key and Text as a value. You also need a Pattern object (which can be taken from predefined ones). Then it's as simple as calling a parseText static method on PlaceholderAPI class. Example Java Kotlin StaticPlaceholders.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 public class StaticPlaceholders { /** * Formats a player message according to <code>inputText</code> * * Example input: * <code> * ${playerName} says \"${message}\" * </code> * * @param inputText The text that is parsed for placeholders. * Example input: * <code>${playerName} says \"${message}\"</code> * @param player The player name used to replace the ${playerName} * variable in the input. Example input: * the player who's name is 'ThePlayerUsername' * @param messageText The message text used to replace the ${message} * variable in the input. Example input: * <code>this is the message</code> * * @return The formatted message. Example return: * <code>ThePlayerUsername says \"this is the message\"</code> */ public static Text formatPlayerMessage ( Text inputText , ServerPlayerEntity player , Text messageText ) { Map < String , Text > placeholders = Map . of ( \"message\" , messageText , // replace ${message} with the messageText \"playerName\" , player . getName () // replace ${playerName} with the player's name ); return Placeholders . parseText ( inputText , Placeholders . PREDEFINED_PLACEHOLDER_PATTERN , placeholders ); // parse the inputText } } StaticPlaceholders.kt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 object StaticPlaceholders { /** * Formats a player message according to [inputText] * * Example input: * ``` * ${playerName} says \"${message}\"! * ``` * * @param inputText The text that is parsed for placeholders. * Example input: * `${playerName} says \"${message}\"` * * @param player The player name used to replace the `${playerName}` variable in the input. * Example input: * the player who's name is `ThePlayerUsername` * * @param messageText The text used to replace the `${message}` variable in the input. * Example input: * `this is the message` * * @return The formatted message. * Example return: * ``` * ThePlayerUsername says \"this is the message\"! * ``` */ fun formatPlayerMessage ( inputText : Text?, player : ServerPlayerEntity , messageText : Text ): Text { val placeholders = mapOf ( \"message\" to messageText , // replace ${message} with the messageText \"playerName\" to player . name , // replace ${playerName} with the player's name ) return Placeholders . parseText ( inputText , Placeholders . PREDEFINED_PLACEHOLDER_PATTERN , placeholders ) // parse the inputText } } Dynamic placeholders \u00b6 In case where you want to parse placeholder with a context similar to global one, you need to create a Map with Identifier as a key and PlaceholderHandler as a value (same as adding global ones). You also will need a pattern object, which is the same as with static ones. As opposite to global ones, you don't need to define namespace/category as it can default to minecraft one (for simpler user input). Then you just parse it with parseText(Text, PlaceholderContext, Pattern, PlaceholderGetter) . Example Java Kotlin DynamicPlaceholders.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 public class DynamicPlaceholders { private static final Random random = new Random (); /** * Example input: * <code> * Hello! ${player blue}. Random number between 0 and 20: ${random 20} * </code> * * Example output: * <code> * Hello! <blue>ThePlayerName</blue>. Random number: 13 * </code> */ public static Text parseInputText ( ServerPlayerEntity player , Text inputText ) { // parse the inputText message return Placeholders . parseText ( inputText , PlaceholderContext . of ( player ), Placeholders . PREDEFINED_PLACEHOLDER_PATTERN , DynamicPlaceholders :: getPlaceholder ); } private static PlaceholderHandler getPlaceholder ( String id ) { return switch ( id ) { case \"player\" -> DynamicPlaceholders :: playerPlaceholder ; case \"random\" -> DynamicPlaceholders :: randomPlaceholder ; default -> null ; }; } private static PlaceholderResult playerPlaceholder ( PlaceholderContext ctx , String arg ) { if ( arg == null ) return PlaceholderResult . invalid ( \"No argument!\" ); if ( ! ctx . hasPlayer ()) return PlaceholderResult . value ( Text . literal ( \"You are not a player!\" ) . setStyle ( Style . EMPTY . withColor ( TextColor . parse ( arg ))) ); return PlaceholderResult . value ( ctx . player (). getName (). copy () . setStyle ( Style . EMPTY . withColor ( TextColor . parse ( arg ))) ); } private static PlaceholderResult randomPlaceholder ( PlaceholderContext ctx , String arg ) { if ( arg == null ) { int randomNumber = random . nextInt ( 10 ); return PlaceholderResult . value ( String . valueOf ( randomNumber )); } try { int randomNumber = random . nextInt ( Integer . parseInt ( arg )); return PlaceholderResult . value ( String . valueOf ( randomNumber )); } catch ( NumberFormatException e ) { return PlaceholderResult . invalid ( \"Invalid number!\" ); } } } DynamicPlaceholders.kt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 object DynamicPlaceholders { private val random = Random () /** * Example input: * ``` * Hello! ${player blue}. Random number between 0 and 20: ${random 20} * ``` * * Example output: * ``` * Hello! <blue>ThePlayerName</blue>. Random number: 13 * ``` */ fun parseInputText ( player : ServerPlayerEntity , inputText : Text ): Text { // parse the inputText message return Placeholders . parseText ( inputText , PlaceholderContext . of ( player ), Placeholders . PREDEFINED_PLACEHOLDER_PATTERN , DynamicPlaceholders :: getPlaceholder ) } private fun getPlaceholder ( id : String ): PlaceholderHandler? { return when ( id ) { \"player\" -> PlaceholderHandler ( DynamicPlaceholders :: playerPlaceholder ) \"random\" -> PlaceholderHandler ( DynamicPlaceholders :: randomPlaceholder ) else -> null } } private fun playerPlaceholder ( ctx : PlaceholderContext , arg : String? ): PlaceholderResult { if ( arg == null ) return PlaceholderResult . invalid ( \"No argument!\" ) if ( ctx . player == null ) return PlaceholderResult . value ( Text . literal ( \"You are not a player!\" ) . setStyle ( Style . EMPTY . withColor ( TextColor . parse ( arg ))) ) return PlaceholderResult . value ( ctx . player !! . name . copy () . setStyle ( Style . EMPTY . withColor ( TextColor . parse ( arg ))) ) } private fun randomPlaceholder ( ctx : PlaceholderContext , arg : String? ): PlaceholderResult { return try { val randomNumber = random . nextInt ( arg ?. toInt () ?: 10 ) PlaceholderResult . value ( randomNumber . toString ()) } catch ( e : NumberFormatException ) { PlaceholderResult . invalid ( \"Invalid number!\" ) } } } Preferred Patterns for static \u00b6 PlaceholderAPI has few Patterns you can use, which are accessible as static objects on Placeholders class. Placeholders . PREDEFINED_PLACEHOLDER_PATTERN ( ${placeholder} ) - works the best in most cases, doesn't collide with other ones. Placeholders . ALT_PLACEHOLDER_PATTERN_CUSTOM ( {placeholder} ) - second best, but have more chance of colliding with user formatting. There are other ones, which usage is allowed, but they might work worse. Placeholders . PLACEHOLDER_PATTERN_CUSTOM ( %placeholder% ) - is the same as default one, but doesn't require : . Placeholders . PLACEHOLDER_PATTERN ( %category:placeholder% ) - used by default global placeholders (requires category). Placeholders . PLACEHOLDER_PATTERN_ALT ( {category:placeholder} ) - used as alternative formatting for global ones (requires category).","title":"Parsing placeholders"},{"location":"dev/parsing-placeholders/#parsing-placeholders","text":"There are few ways (and types) of placeholders you can parse with PlaceholderAPI. So depending on your use case some of these will be more useful than others.","title":"Parsing placeholders"},{"location":"dev/parsing-placeholders/#placeholder-context","text":"Placeholders should be provided with a context at all times. The context allows the placeholder parser to inject placeholders that require an optional context, such as a player. A PlaceholderContext is created using one of the PlaceholderContext.of(...) variants. Depending on the objects passed, different placeholders may be available. PlaceholderContext.of(...) Variants MinecraftServer May use placeholders that depend on the server May use placeholders that depend on ServerCommandSource (Note: uses the command source from MinecraftServer.getCommandSource() ) GameProfile May use placeholders that depend on the server May use placeholders that depend on ServerCommandSource (Note: creates a new dummy command source at (0,0,0) ) May use placeholders that depend on GameProfile ServerPlayerEntity May use placeholders that depend on the server May use placeholders that depend on ServerCommandSource May use placeholders that depend on ServerWorld May use placeholders that depend on ServerPlayerEntity May use placeholders that depend on Entity May use placeholders that depend on GameProfile ServerCommandSource May use placeholders that depend on the server May use placeholders that depend on ServerCommandSource May use placeholders that depend on ServerWorld May use placeholders that depend on ServerPlayerEntity only if the source has a player May use placeholders that depend on Entity only if the source has an entity May use placeholders that depend on GameProfile only if the source has a player Entity May use placeholders that depend on the server May use placeholders that depend on ServerCommandSource May use placeholders that depend on ServerWorld May use placeholders that depend on ServerPlayerEntity only if the source has a player May use placeholders that depend on Entity May use placeholders that depend on GameProfile only if the source has a player","title":"Placeholder Context"},{"location":"dev/parsing-placeholders/#parsing-global-placeholders","text":"Parsing global placeholders is really simple, as long as you have access to ServerPlayerEntity or MinecraftServer object. You just need to simply import eu.pb4.placeholders.api.Placeholders and call parseText . This method will return fully parsed Text, which can be displayed to the user. Example Java Kotlin 1 Text message = Placeholders . parseText ( textInput , PlaceholderContext . of (...)); 1 val message = Placeholders . parseText ( textInput , PlaceholderContext . of (...)) Placeholders itself will use default formatting of %category:placeholder% . If you want to use other formatting for them (which is recommended), you can use parseText(Text, PlaceholderContext, Pattern) . Prefer those listed in Preferred Patterns for static .","title":"Parsing global placeholders"},{"location":"dev/parsing-placeholders/#parsing-owncustompredefined-placeholders","text":"If you want to parse your own placeholders, you can do this in 2 ways.","title":"Parsing own/custom/predefined placeholders"},{"location":"dev/parsing-placeholders/#static-placeholders","text":"To parse static placeholders you need to create a Map with String as a key and Text as a value. You also need a Pattern object (which can be taken from predefined ones). Then it's as simple as calling a parseText static method on PlaceholderAPI class. Example Java Kotlin StaticPlaceholders.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 public class StaticPlaceholders { /** * Formats a player message according to <code>inputText</code> * * Example input: * <code> * ${playerName} says \"${message}\" * </code> * * @param inputText The text that is parsed for placeholders. * Example input: * <code>${playerName} says \"${message}\"</code> * @param player The player name used to replace the ${playerName} * variable in the input. Example input: * the player who's name is 'ThePlayerUsername' * @param messageText The message text used to replace the ${message} * variable in the input. Example input: * <code>this is the message</code> * * @return The formatted message. Example return: * <code>ThePlayerUsername says \"this is the message\"</code> */ public static Text formatPlayerMessage ( Text inputText , ServerPlayerEntity player , Text messageText ) { Map < String , Text > placeholders = Map . of ( \"message\" , messageText , // replace ${message} with the messageText \"playerName\" , player . getName () // replace ${playerName} with the player's name ); return Placeholders . parseText ( inputText , Placeholders . PREDEFINED_PLACEHOLDER_PATTERN , placeholders ); // parse the inputText } } StaticPlaceholders.kt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 object StaticPlaceholders { /** * Formats a player message according to [inputText] * * Example input: * ``` * ${playerName} says \"${message}\"! * ``` * * @param inputText The text that is parsed for placeholders. * Example input: * `${playerName} says \"${message}\"` * * @param player The player name used to replace the `${playerName}` variable in the input. * Example input: * the player who's name is `ThePlayerUsername` * * @param messageText The text used to replace the `${message}` variable in the input. * Example input: * `this is the message` * * @return The formatted message. * Example return: * ``` * ThePlayerUsername says \"this is the message\"! * ``` */ fun formatPlayerMessage ( inputText : Text?, player : ServerPlayerEntity , messageText : Text ): Text { val placeholders = mapOf ( \"message\" to messageText , // replace ${message} with the messageText \"playerName\" to player . name , // replace ${playerName} with the player's name ) return Placeholders . parseText ( inputText , Placeholders . PREDEFINED_PLACEHOLDER_PATTERN , placeholders ) // parse the inputText } }","title":"Static placeholders"},{"location":"dev/parsing-placeholders/#dynamic-placeholders","text":"In case where you want to parse placeholder with a context similar to global one, you need to create a Map with Identifier as a key and PlaceholderHandler as a value (same as adding global ones). You also will need a pattern object, which is the same as with static ones. As opposite to global ones, you don't need to define namespace/category as it can default to minecraft one (for simpler user input). Then you just parse it with parseText(Text, PlaceholderContext, Pattern, PlaceholderGetter) . Example Java Kotlin DynamicPlaceholders.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 public class DynamicPlaceholders { private static final Random random = new Random (); /** * Example input: * <code> * Hello! ${player blue}. Random number between 0 and 20: ${random 20} * </code> * * Example output: * <code> * Hello! <blue>ThePlayerName</blue>. Random number: 13 * </code> */ public static Text parseInputText ( ServerPlayerEntity player , Text inputText ) { // parse the inputText message return Placeholders . parseText ( inputText , PlaceholderContext . of ( player ), Placeholders . PREDEFINED_PLACEHOLDER_PATTERN , DynamicPlaceholders :: getPlaceholder ); } private static PlaceholderHandler getPlaceholder ( String id ) { return switch ( id ) { case \"player\" -> DynamicPlaceholders :: playerPlaceholder ; case \"random\" -> DynamicPlaceholders :: randomPlaceholder ; default -> null ; }; } private static PlaceholderResult playerPlaceholder ( PlaceholderContext ctx , String arg ) { if ( arg == null ) return PlaceholderResult . invalid ( \"No argument!\" ); if ( ! ctx . hasPlayer ()) return PlaceholderResult . value ( Text . literal ( \"You are not a player!\" ) . setStyle ( Style . EMPTY . withColor ( TextColor . parse ( arg ))) ); return PlaceholderResult . value ( ctx . player (). getName (). copy () . setStyle ( Style . EMPTY . withColor ( TextColor . parse ( arg ))) ); } private static PlaceholderResult randomPlaceholder ( PlaceholderContext ctx , String arg ) { if ( arg == null ) { int randomNumber = random . nextInt ( 10 ); return PlaceholderResult . value ( String . valueOf ( randomNumber )); } try { int randomNumber = random . nextInt ( Integer . parseInt ( arg )); return PlaceholderResult . value ( String . valueOf ( randomNumber )); } catch ( NumberFormatException e ) { return PlaceholderResult . invalid ( \"Invalid number!\" ); } } } DynamicPlaceholders.kt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 object DynamicPlaceholders { private val random = Random () /** * Example input: * ``` * Hello! ${player blue}. Random number between 0 and 20: ${random 20} * ``` * * Example output: * ``` * Hello! <blue>ThePlayerName</blue>. Random number: 13 * ``` */ fun parseInputText ( player : ServerPlayerEntity , inputText : Text ): Text { // parse the inputText message return Placeholders . parseText ( inputText , PlaceholderContext . of ( player ), Placeholders . PREDEFINED_PLACEHOLDER_PATTERN , DynamicPlaceholders :: getPlaceholder ) } private fun getPlaceholder ( id : String ): PlaceholderHandler? { return when ( id ) { \"player\" -> PlaceholderHandler ( DynamicPlaceholders :: playerPlaceholder ) \"random\" -> PlaceholderHandler ( DynamicPlaceholders :: randomPlaceholder ) else -> null } } private fun playerPlaceholder ( ctx : PlaceholderContext , arg : String? ): PlaceholderResult { if ( arg == null ) return PlaceholderResult . invalid ( \"No argument!\" ) if ( ctx . player == null ) return PlaceholderResult . value ( Text . literal ( \"You are not a player!\" ) . setStyle ( Style . EMPTY . withColor ( TextColor . parse ( arg ))) ) return PlaceholderResult . value ( ctx . player !! . name . copy () . setStyle ( Style . EMPTY . withColor ( TextColor . parse ( arg ))) ) } private fun randomPlaceholder ( ctx : PlaceholderContext , arg : String? ): PlaceholderResult { return try { val randomNumber = random . nextInt ( arg ?. toInt () ?: 10 ) PlaceholderResult . value ( randomNumber . toString ()) } catch ( e : NumberFormatException ) { PlaceholderResult . invalid ( \"Invalid number!\" ) } } }","title":"Dynamic placeholders"},{"location":"dev/parsing-placeholders/#preferred-patterns-for-static","text":"PlaceholderAPI has few Patterns you can use, which are accessible as static objects on Placeholders class. Placeholders . PREDEFINED_PLACEHOLDER_PATTERN ( ${placeholder} ) - works the best in most cases, doesn't collide with other ones. Placeholders . ALT_PLACEHOLDER_PATTERN_CUSTOM ( {placeholder} ) - second best, but have more chance of colliding with user formatting. There are other ones, which usage is allowed, but they might work worse. Placeholders . PLACEHOLDER_PATTERN_CUSTOM ( %placeholder% ) - is the same as default one, but doesn't require : . Placeholders . PLACEHOLDER_PATTERN ( %category:placeholder% ) - used by default global placeholders (requires category). Placeholders . PLACEHOLDER_PATTERN_ALT ( {category:placeholder} ) - used as alternative formatting for global ones (requires category).","title":"Preferred Patterns for static"},{"location":"dev/text-format/","text":"Using Simplified Text Format/TextParser \u00b6 You can read about the format here! Usage of TextParser is simple and really customisable. You just need to import eu.pb4.placeholders.api.TextParserUtils and call static formatText method for admin provided configs or formatTextSafe for player provided ones. They both take only one String argument and output a Text object. Example Java Kotlin 1 2 3 String inputString = \"<red>Hello <rb>World</rb>!\" Text output = TextParserUtils . parseText ( inputString ); 1 2 3 val inputString = \"<red>Hello <rb>World</rb>!\" val output = TextParserUtils . parseText ( inputString ); Parsing with only selected ones \u00b6 If you want to only use selected tags, you can simply get map of all with TextParserV1.DEFAULT.getTags() . Then you just use them with TextParserUtils.parseText(String, TextParserV1.TagParserGetter) .","title":"Using Simplified Text Format/TextParser"},{"location":"dev/text-format/#using-simplified-text-formattextparser","text":"You can read about the format here! Usage of TextParser is simple and really customisable. You just need to import eu.pb4.placeholders.api.TextParserUtils and call static formatText method for admin provided configs or formatTextSafe for player provided ones. They both take only one String argument and output a Text object. Example Java Kotlin 1 2 3 String inputString = \"<red>Hello <rb>World</rb>!\" Text output = TextParserUtils . parseText ( inputString ); 1 2 3 val inputString = \"<red>Hello <rb>World</rb>!\" val output = TextParserUtils . parseText ( inputString );","title":"Using Simplified Text Format/TextParser"},{"location":"dev/text-format/#parsing-with-only-selected-ones","text":"If you want to only use selected tags, you can simply get map of all with TextParserV1.DEFAULT.getTags() . Then you just use them with TextParserUtils.parseText(String, TextParserV1.TagParserGetter) .","title":"Parsing with only selected ones"},{"location":"user/default-placeholders/","text":"Default placeholder list \u00b6 These placeholders are provided by default and are available for every mod using Placeholder API. If placeholder isn't parsed, make sure it is used in correct context, with valid arguments and that you are using the latest version. Prior to 1.19, arguments were separated with a slash ( / ) instead of space. List of placeholders \u00b6 Player \u00b6 Vanilla Statistics A list of statistics can be found on the Minecraft Wiki %player:name% - The player's name. %player:name_visual% - The player's name (without hover and click action). %player:name_unformatted% - The player's name (without formatting). %player:displayname% - The player's display name (used on chat). %player:displayname_visual% - The player's display name (without hover and click action). %player:displayname_unformatted% - The player's display name (without formatting). %player:ping% - The player's ping. %player:ping_colored% - The player's ping (colored). %player:pos_x% - The player's x coordinate. %player:pos_y% - The player's y coordinate. %player:pos_z% - The player's z coordinate. %player:health% - The player's health. %player:max_health% - The player's max health. %player:hunger% - The player's hunger. %player:saturation% - The player's saturation. %player:inventory_slot [slot number]% - The item in player's inventory at slot number . %player:equipment_slot [name]% - The player's equipment at selected slot. Valid values for [name] are mainhand , offhand , head , chest , legs and feet . %player:playtime% / %player:playtime [formatting]% - The player's playtime. %player:statistic [statistic]% - The value of player's statistic. World \u00b6 Valid Groups Valid values for [group] are monster , creature , ambient , axolotls , underground_water_creature , water_creature , water_ambient , and misc . %world:time% - The world's time (Format: HH:MM ). %world:time_alt% - The world's time (alternative formatting) (Format: HH:MM AM/PM ). %world:day% - The world's day. %world:player_count% - The world's player count. %world:mob_count% / %world:mob_count [group]% - Shows amount of spawned mobs. %world:mob_cap% / %world:mob_cap [group]% - Shows maximum amount of mobs that can spawn is player's world. %world:id% - The world's ID. %world:name% - The world's name. Server \u00b6 %server:tps% - The server's TPS . %server:tps_colored% - The server's TPS (colored). %server:mspt% - The server's MSPT . %server:mspt_colored% - The server's MSPT (colored). %server:time% / %server:time [formatting]% - The server's time. %server:version% - The server's version. %server:name% - The server's name. %server:used_ram% / %server:used_ram [gb]% - The amount of ram used by server. (If the argument gb is added, it is displayed in gigabytes) %server:max_ram% / %server:max_ram [gb]% - The maximum amount of ram that can be used by server. (If the argument gb is added, it is displayed in gigabytes) %server:online% - The number of online players. %server:max_players% - The maximum player count. %server:mod_version [modid]% - Returns version of the specified mod. %server:mod_name [modid]% - Returns name of the specified mod. %server:mod_description [modid]% - Returns description of the specified mod.","title":"Default placeholder list"},{"location":"user/default-placeholders/#default-placeholder-list","text":"These placeholders are provided by default and are available for every mod using Placeholder API. If placeholder isn't parsed, make sure it is used in correct context, with valid arguments and that you are using the latest version. Prior to 1.19, arguments were separated with a slash ( / ) instead of space.","title":"Default placeholder list"},{"location":"user/default-placeholders/#list-of-placeholders","text":"","title":"List of placeholders"},{"location":"user/default-placeholders/#player","text":"Vanilla Statistics A list of statistics can be found on the Minecraft Wiki %player:name% - The player's name. %player:name_visual% - The player's name (without hover and click action). %player:name_unformatted% - The player's name (without formatting). %player:displayname% - The player's display name (used on chat). %player:displayname_visual% - The player's display name (without hover and click action). %player:displayname_unformatted% - The player's display name (without formatting). %player:ping% - The player's ping. %player:ping_colored% - The player's ping (colored). %player:pos_x% - The player's x coordinate. %player:pos_y% - The player's y coordinate. %player:pos_z% - The player's z coordinate. %player:health% - The player's health. %player:max_health% - The player's max health. %player:hunger% - The player's hunger. %player:saturation% - The player's saturation. %player:inventory_slot [slot number]% - The item in player's inventory at slot number . %player:equipment_slot [name]% - The player's equipment at selected slot. Valid values for [name] are mainhand , offhand , head , chest , legs and feet . %player:playtime% / %player:playtime [formatting]% - The player's playtime. %player:statistic [statistic]% - The value of player's statistic.","title":"Player"},{"location":"user/default-placeholders/#world","text":"Valid Groups Valid values for [group] are monster , creature , ambient , axolotls , underground_water_creature , water_creature , water_ambient , and misc . %world:time% - The world's time (Format: HH:MM ). %world:time_alt% - The world's time (alternative formatting) (Format: HH:MM AM/PM ). %world:day% - The world's day. %world:player_count% - The world's player count. %world:mob_count% / %world:mob_count [group]% - Shows amount of spawned mobs. %world:mob_cap% / %world:mob_cap [group]% - Shows maximum amount of mobs that can spawn is player's world. %world:id% - The world's ID. %world:name% - The world's name.","title":"World"},{"location":"user/default-placeholders/#server","text":"%server:tps% - The server's TPS . %server:tps_colored% - The server's TPS (colored). %server:mspt% - The server's MSPT . %server:mspt_colored% - The server's MSPT (colored). %server:time% / %server:time [formatting]% - The server's time. %server:version% - The server's version. %server:name% - The server's name. %server:used_ram% / %server:used_ram [gb]% - The amount of ram used by server. (If the argument gb is added, it is displayed in gigabytes) %server:max_ram% / %server:max_ram [gb]% - The maximum amount of ram that can be used by server. (If the argument gb is added, it is displayed in gigabytes) %server:online% - The number of online players. %server:max_players% - The maximum player count. %server:mod_version [modid]% - Returns version of the specified mod. %server:mod_name [modid]% - Returns name of the specified mod. %server:mod_description [modid]% - Returns description of the specified mod.","title":"Server"},{"location":"user/general/","text":"Using placeholders \u00b6 Usage of placeholder mostly depends on implementation of mod itself. If mod uses simple, one/multiline text (for example with Simple Text Format) you just need to add it by just writing %placeholder% (or in some cases {placeholder} , ${placeholder} or other format which should be provided on mods page). Inner part of placeholder can take shape of either category:placeholder or category:placeholder argument (previously category:placeholder/argument prior to 1.19), where category is replaced by type ( player , world , etc) or ID of the mod and placeholder is the placeholder itself. Additionally, some placeholders might have additional or required argument provided after first space. It's format fully depend on mod providing it. You can check list of build in placeholders here and placeholders from mods here . List of mods supporting displaying Placeholder API's placeholders: \u00b6 Missing Your Mod? Are you a mod dev, and your mod is missing? Feel free to open an issue! Styled Player List - CurseForge , Modrinth , Github Styled Chat - CurseForge , Modrinth , Github Holograms - CurseForge , Modrinth , Github Player Events - CurseForge , Github Discord4Fabric - CurseForge , Modrinth , Github","title":"Using placeholders"},{"location":"user/general/#using-placeholders","text":"Usage of placeholder mostly depends on implementation of mod itself. If mod uses simple, one/multiline text (for example with Simple Text Format) you just need to add it by just writing %placeholder% (or in some cases {placeholder} , ${placeholder} or other format which should be provided on mods page). Inner part of placeholder can take shape of either category:placeholder or category:placeholder argument (previously category:placeholder/argument prior to 1.19), where category is replaced by type ( player , world , etc) or ID of the mod and placeholder is the placeholder itself. Additionally, some placeholders might have additional or required argument provided after first space. It's format fully depend on mod providing it. You can check list of build in placeholders here and placeholders from mods here .","title":"Using placeholders"},{"location":"user/general/#list-of-mods-supporting-displaying-placeholder-apis-placeholders","text":"Missing Your Mod? Are you a mod dev, and your mod is missing? Feel free to open an issue! Styled Player List - CurseForge , Modrinth , Github Styled Chat - CurseForge , Modrinth , Github Holograms - CurseForge , Modrinth , Github Player Events - CurseForge , Github Discord4Fabric - CurseForge , Modrinth , Github","title":"List of mods supporting displaying Placeholder API's placeholders:"},{"location":"user/mod-placeholders/","text":"Mod placeholders list \u00b6 These placeholders are provided by other mods. Some are build in directly, while others require an addon. List of placeholders \u00b6 Get Off My Lawn ReServed \u00b6 %goml:claim_owners% / %goml:claim_owners [no owners text]% - Returns a list of claim owners. %goml:claim_owners_uuid% / %goml:claim_owners_uuid [no owners text]% - Returns a list of claim owners (as UUIDs ). %goml:claim_trusted% / %goml:claim_trusted [no trusted text]% - Returns a list of trusted players. %goml:claim_trusted_uuid% / %goml:claim_trusted_uuid [no trusted text]% - Returns a list of trusted players (as UUIDs ). %goml:claim_info% / %goml:claim_info [no claim text]:[can build text]:[can't build text]% - Returns the info for a claim. (variables: ${owners} , ${owners_uuid} , ${trusted} , ${trusted_uuid} , ${anchor} ) Luckperms \u00b6 Dependency Requires LuckPerms Fabric PlaceholderAPI addon %luckperms:prefix% - Returns the player's prefix. %luckperms:suffix% - Returns the players suffix. %luckperms:meta [meta key]% - Returns a single value for the given meta key. %luckperms:meta_all [meta key]% - Returns all assigned values for the given meta key. %luckperms:prefix_element [element]% - Returns a prefix element using the given \"meta stack\" element definition. See Prefix Stacking %luckperms:suffix_element [element]% - Returns a suffix element using the given \"meta stack\" element definition. See Prefix Stacking . %luckperms:context% / %luckperms:context [context key]% - Returns all of the players current contexts. If a key is given as an argument, then only the values corresponding to the given key are returned. %luckperms:groups% - Returns a list of the groups directly inherited by the player. %luckperms:inherited_groups% - Returns a list of all of the groups inherited (directly or indirectly) by the player. %luckperms:primary_group_name% - Returns the name of the player's primary group. %luckperms:has_permission [permission]% - Returns if the player directly has the exact given permission. (not the same as a permission check!) %luckperms:inherits_permission [permission]% - Returns if the player inherits the exact given permission. (not the same as a permission check!) %luckperms:check_permission [permission]% - Returns the result of a permission check for the given permission on the player. %luckperms:in_group [group]% - Returns if the player is directly a member of the given group. %luckperms:inherits_group [group]% - Returns if the player is a direct or indirect member of the given group. %luckperms:on_track [track]% - Returns if the player's \"primary group\" is on this track. (deprecated - avoid relying on primary groups, use the placeholder below instead!) %luckperms:has_groups_on_track [track]% - Returns if any of the groups the player is directly a member of is on the given track. %luckperms:highest_group_by_weight% - Returns the name of the players highest weighted group, not including groups they indirectly inherit from others. %luckperms:lowest_group_by_weight% - Returns the name of the players lowest weighted group, not including groups they indirectly inherit from others. %luckperms:highest_inherited_group_by_weight% - Returns the name of the players highest weighted group, including groups they indirectly inherit from others. %luckperms:lowest_inherited_group_by_weight% - Returns the name of the players lowest weighted group, including groups they indirectly inherit from others. %luckperms:current_group_on_track [track]% - If the player is currently on the given track, returns the name of the group. %luckperms:next_group_on_track [track]% - If the player is currently is currently on the given track, returns the name of the next group. (the one they would be promoted to next) %luckperms:previous_group_on_track [track]% - If the player is currently is currently on the given track, returns the name of the previous group. (the one they would be demoted to next) %luckperms:first_group_on_tracks [tracks]% - Given a comma separated list of track names, finds the first group inherited by the player on any of the given tracks. %luckperms:last_group_on_tracks [tracks]% - Given a comma separated list of track names, finds the last group inherited by the player on any of the given tracks. %luckperms:expiry_time [permission]% - Gets the duration remaining on a temporary permission assigned directly to the player. %luckperms:inherited_expiry_time [permission]% - Gets the duration remaining on a temporary permission assigned directly to or inherited by the player. %luckperms:group_expiry_time [group name]% - Gets the duration remaining on a temporary group membership assigned directly to the player. %luckperms:inherited_group_expiry_time [group name]% - Gets the duration remaining on a temporary group membership assigned directly to or inherited by the player. PlayerEx \u00b6 %playerex:level% - Shows current player level. %playerex:name_top [position]% - Shows name of the player at the n th place, where n is the position argument. %playerex:level_top [position]% - Shows level of the player at the n th place, where n is the position argument. Player Pronouns \u00b6 %playerpronouns:pronouns% / %playerpronouns:pronouns [default]% - Displays formatted player's pronouns, or default if unset. %playerpronouns:raw_pronouns% / %playerpronouns:raw_pronouns [default]% - Displays player's pronouns as raw text, or default if unset. This allows text formatting to be embedded into the pronouns. Spark \u00b6 %spark:tps% / %spark:tps duration% - Shows server TPS . duration can be 5s , 10s , 1m , 5m , or 15m . Shows all durations if left out %spark:tickduration% / %spark:tickduration [duration]% - Shows the average tick durations. duration can be 10s or 1m . Shows all durations if left out %spark:cpu_system% / %spark:cpu_system [duration]% - Shows the average CPU usage for the whole system. duration can be 10s , 1m , or 15m . Shows all durations if left out %spark:cpu_process% / %spark:cpu_process [duration]% - Shows the average CPU usage for the server process. duration can be 10s , 1m , or 15m . Shows all durations if left out Styled Nicknames \u00b6 %styled-nicknames:display_name% - Either nickname or default player name. (skips other formatting mods) Vanish \u00b6 %vanish:vanished% - Displays a text (configurable via config) if a player is vanished. %vanish:online% - The amount of players that the player viewing the placeholder can see.","title":"Mod placeholders list"},{"location":"user/mod-placeholders/#mod-placeholders-list","text":"These placeholders are provided by other mods. Some are build in directly, while others require an addon.","title":"Mod placeholders list"},{"location":"user/mod-placeholders/#list-of-placeholders","text":"","title":"List of placeholders"},{"location":"user/mod-placeholders/#get-off-my-lawn-reserved","text":"%goml:claim_owners% / %goml:claim_owners [no owners text]% - Returns a list of claim owners. %goml:claim_owners_uuid% / %goml:claim_owners_uuid [no owners text]% - Returns a list of claim owners (as UUIDs ). %goml:claim_trusted% / %goml:claim_trusted [no trusted text]% - Returns a list of trusted players. %goml:claim_trusted_uuid% / %goml:claim_trusted_uuid [no trusted text]% - Returns a list of trusted players (as UUIDs ). %goml:claim_info% / %goml:claim_info [no claim text]:[can build text]:[can't build text]% - Returns the info for a claim. (variables: ${owners} , ${owners_uuid} , ${trusted} , ${trusted_uuid} , ${anchor} )","title":"Get Off My Lawn ReServed"},{"location":"user/mod-placeholders/#luckperms","text":"Dependency Requires LuckPerms Fabric PlaceholderAPI addon %luckperms:prefix% - Returns the player's prefix. %luckperms:suffix% - Returns the players suffix. %luckperms:meta [meta key]% - Returns a single value for the given meta key. %luckperms:meta_all [meta key]% - Returns all assigned values for the given meta key. %luckperms:prefix_element [element]% - Returns a prefix element using the given \"meta stack\" element definition. See Prefix Stacking %luckperms:suffix_element [element]% - Returns a suffix element using the given \"meta stack\" element definition. See Prefix Stacking . %luckperms:context% / %luckperms:context [context key]% - Returns all of the players current contexts. If a key is given as an argument, then only the values corresponding to the given key are returned. %luckperms:groups% - Returns a list of the groups directly inherited by the player. %luckperms:inherited_groups% - Returns a list of all of the groups inherited (directly or indirectly) by the player. %luckperms:primary_group_name% - Returns the name of the player's primary group. %luckperms:has_permission [permission]% - Returns if the player directly has the exact given permission. (not the same as a permission check!) %luckperms:inherits_permission [permission]% - Returns if the player inherits the exact given permission. (not the same as a permission check!) %luckperms:check_permission [permission]% - Returns the result of a permission check for the given permission on the player. %luckperms:in_group [group]% - Returns if the player is directly a member of the given group. %luckperms:inherits_group [group]% - Returns if the player is a direct or indirect member of the given group. %luckperms:on_track [track]% - Returns if the player's \"primary group\" is on this track. (deprecated - avoid relying on primary groups, use the placeholder below instead!) %luckperms:has_groups_on_track [track]% - Returns if any of the groups the player is directly a member of is on the given track. %luckperms:highest_group_by_weight% - Returns the name of the players highest weighted group, not including groups they indirectly inherit from others. %luckperms:lowest_group_by_weight% - Returns the name of the players lowest weighted group, not including groups they indirectly inherit from others. %luckperms:highest_inherited_group_by_weight% - Returns the name of the players highest weighted group, including groups they indirectly inherit from others. %luckperms:lowest_inherited_group_by_weight% - Returns the name of the players lowest weighted group, including groups they indirectly inherit from others. %luckperms:current_group_on_track [track]% - If the player is currently on the given track, returns the name of the group. %luckperms:next_group_on_track [track]% - If the player is currently is currently on the given track, returns the name of the next group. (the one they would be promoted to next) %luckperms:previous_group_on_track [track]% - If the player is currently is currently on the given track, returns the name of the previous group. (the one they would be demoted to next) %luckperms:first_group_on_tracks [tracks]% - Given a comma separated list of track names, finds the first group inherited by the player on any of the given tracks. %luckperms:last_group_on_tracks [tracks]% - Given a comma separated list of track names, finds the last group inherited by the player on any of the given tracks. %luckperms:expiry_time [permission]% - Gets the duration remaining on a temporary permission assigned directly to the player. %luckperms:inherited_expiry_time [permission]% - Gets the duration remaining on a temporary permission assigned directly to or inherited by the player. %luckperms:group_expiry_time [group name]% - Gets the duration remaining on a temporary group membership assigned directly to the player. %luckperms:inherited_group_expiry_time [group name]% - Gets the duration remaining on a temporary group membership assigned directly to or inherited by the player.","title":"Luckperms"},{"location":"user/mod-placeholders/#playerex","text":"%playerex:level% - Shows current player level. %playerex:name_top [position]% - Shows name of the player at the n th place, where n is the position argument. %playerex:level_top [position]% - Shows level of the player at the n th place, where n is the position argument.","title":"PlayerEx"},{"location":"user/mod-placeholders/#player-pronouns","text":"%playerpronouns:pronouns% / %playerpronouns:pronouns [default]% - Displays formatted player's pronouns, or default if unset. %playerpronouns:raw_pronouns% / %playerpronouns:raw_pronouns [default]% - Displays player's pronouns as raw text, or default if unset. This allows text formatting to be embedded into the pronouns.","title":"Player Pronouns"},{"location":"user/mod-placeholders/#spark","text":"%spark:tps% / %spark:tps duration% - Shows server TPS . duration can be 5s , 10s , 1m , 5m , or 15m . Shows all durations if left out %spark:tickduration% / %spark:tickduration [duration]% - Shows the average tick durations. duration can be 10s or 1m . Shows all durations if left out %spark:cpu_system% / %spark:cpu_system [duration]% - Shows the average CPU usage for the whole system. duration can be 10s , 1m , or 15m . Shows all durations if left out %spark:cpu_process% / %spark:cpu_process [duration]% - Shows the average CPU usage for the server process. duration can be 10s , 1m , or 15m . Shows all durations if left out","title":"Spark"},{"location":"user/mod-placeholders/#styled-nicknames","text":"%styled-nicknames:display_name% - Either nickname or default player name. (skips other formatting mods)","title":"Styled Nicknames"},{"location":"user/mod-placeholders/#vanish","text":"%vanish:vanished% - Displays a text (configurable via config) if a player is vanished. %vanish:online% - The amount of players that the player viewing the placeholder can see.","title":"Vanish"},{"location":"user/text-format/","text":"Simplified Text Format \u00b6 It's a simple, string format inspired by formats like HTML or MiniMessage. It was created to allow quick and readable way of formatting Minecraft Text Components while still providing all of its functionality as opposed for legacy &/\u00a7 formatting used by bukkit and bukkit-based plugins. Structure \u00b6 Formatting is build on concept of tags. Nesting Quotations In the rare circumstance you need to nest quations, they must be escaped: \\' . For example, 1 <lang:'chat.type.team.sent':'<hover\\:\\'<lang\\:chat.type.team.hover>\\'><suggest_command\\:\\'/teammsg \\'>${team}':'${displayName}':'${message}'> Most of them come in pairs of a starting ( <tag> ) and closing one ( </tag> ). While closing ones are technically optional, without them formatting will continue until end of an input text or special <reset> tag. Some tags support arguments, which can be passed by adding : after tag name in starting one (for example <color: #FF3333 > </color> ). Arguments containing symbols like : , < , > , % and spaces should be wrapped in a ' symbols (for example <hover:show_text: '<red > Hello!'>... ). In case you want to type <tag> as plain text, you need to prefix it with \\ symbol . Example <color: #11dddd > %player:displayname% </color> <dark_gray> \u00bb </dark_gray> <color: #cccccc > ${message} <red> Hello <blue> world </blue> ! </red> <rainbow> Some colors for you There are also few self-contained tags, that don't require closing ones. They can also take arguments in the same way to previous ones. Few examples: <lang: 'item.minecraft.diamond' > <reset> List of available tags \u00b6 Here is list of all default tags available. Other mods can add new or limit usage of existing ones, so not every might work in yours case. Colors \u00b6 Note This tag should be closed. By default, there are multiple tags representing colors. They use their vanilla name or (additional aliases). The current list includes: <yellow> , <dark_blue> , <dark_purple> , <gold> , <red> , <aqua> , <gray> , <light_purple> , <white> , <dark_gray> , <green> , <dark_green> , <blue> , <dark_aqua> , <dark_green> , <black> There is also a universal <color: [value] > and <c: [value] > tags, in which you can replace [value] with vanilla color name or an rgb color starting with # (for example <color: #AABBCC > ) Decorations \u00b6 Note This tag should be closed. These tags allow decorating text, they are quite simple. <strikethrough> / <st> - Makes the text strikethrough, <underline> / <underlined> - Underlines the text, <italic> / <i> - Makes the text italic, <obfuscated> / <obf> - Obfuscates the text (matrix effect), <bold> / <b> - Makes the text bold, Click events \u00b6 Note This tag should be closed. Danger They should be however limited to admin usage only, as they can do harm if accessible by normal players. Click events allows making text more interactive. There are few available actions: <click:open_url: [value] > / <open_url: [value] > / <url: [value] > - Opens the provided url <click:run_command: [value] > / <run_cmd: [value] > - Runs a command as the player <click:suggest_command: [value] > / <suggest_command: [value] > / <cmd: [value] > - Suggests a command to the player <click:copy_to_clipboard: [value] > / <copy_to_clipboard: [value] > / <copy: [value] > - Copies text to the clipboard <click:change_page: [value] > / <change_page: [value] > / <page: [value] > - Changes the page in a book [value] needs to be replaced with targeted value, for example 'gamemode creative' Hover \u00b6 Hover tag allows adding simple hover on text. It can be used to display additional information. Note This tag should be closed. <hover:show_text: [value] > / <hover: [value] > - Adds a simple text hover ( [value] uses the same formatting as rest) <hover:show_item: [value] > - Adds a simple ItemStack hover ( [value] is item in sNBT format) <hover:show_entity: [type]:[UUID]:'Display Name' > - Adds an entity hover. (The colon ( : ) in the entity type needs to be replaced with \\: . For example, <hover:show_entity:minecraft \\:bee:[UUID]:'Display Name' > ) Fonts \u00b6 Note This tag should be closed. This tag allows you to change font to any build in one or one provided by resource pack. You can use it by simply adding <font: [value] > , where [value] is just a font name. Minecraft has 3 build-in fonts: default , uniform and alt . Inserting \u00b6 Note This tag should be closed. This tag creates a clickable text, that inserts its value at the end of player's chat message. You can use it by writing <insert: [value] > , where [value] inserted text (should be wrapped in ' ). Translations \u00b6 Note This tag is self containing, so it doesn't contain a closing tag. Translations tag allows you to insert a text from a lang file (including ones parsed on servers by some mods). You use it with <lang: [key]:[optional arg 1]:[optional arg 1]:... > , where [key] is a translation key and [optional arg X] are optional, fully formatted arguments you can pass. Control keys \u00b6 Control Keys You can find a list of control keys on the Minecraft Wiki Note This tag is self containing, so it doesn't contain a closing tag. This tag allows you to add information about player control keys, with respecting of theirs configuration. You can use it with <keybind: [value] > , where [value] is a control key used. Gradients \u00b6 This tag allows you to add gradients to the text. However, it has multiple limitation that can block its usage. Currently, you can't use dynamic values (translations, control keys, placeholders, etc) within them, as they require static text. There 2 types of gradients: <gradient: [color 1]:[color 2]:... > / <gr: [color 1]:[color 2]:... > - I can take multiple colors to move between them smoothly. <hard_gradient: [color 1]:[color 2]:... > / <hgr: [color 1]:[color 2]:... > - I can take multiple colors to move between them without mixing them. <rainbow: [frequency]:[saturation]:[offset] > / <rb: [...] > - It's simple rainbow gradient. All arguments are optional ( <ranbow> is still valid) and they take numbers between 0 and 1 ( 0.3 for example) Reset \u00b6 <reset> and <r> are special, self-contained tags which close all previous formatting. They are useful in cases, where you want to close multiple formatting tags quickly","title":"Simplified Text Format"},{"location":"user/text-format/#simplified-text-format","text":"It's a simple, string format inspired by formats like HTML or MiniMessage. It was created to allow quick and readable way of formatting Minecraft Text Components while still providing all of its functionality as opposed for legacy &/\u00a7 formatting used by bukkit and bukkit-based plugins.","title":"Simplified Text Format"},{"location":"user/text-format/#structure","text":"Formatting is build on concept of tags. Nesting Quotations In the rare circumstance you need to nest quations, they must be escaped: \\' . For example, 1 <lang:'chat.type.team.sent':'<hover\\:\\'<lang\\:chat.type.team.hover>\\'><suggest_command\\:\\'/teammsg \\'>${team}':'${displayName}':'${message}'> Most of them come in pairs of a starting ( <tag> ) and closing one ( </tag> ). While closing ones are technically optional, without them formatting will continue until end of an input text or special <reset> tag. Some tags support arguments, which can be passed by adding : after tag name in starting one (for example <color: #FF3333 > </color> ). Arguments containing symbols like : , < , > , % and spaces should be wrapped in a ' symbols (for example <hover:show_text: '<red > Hello!'>... ). In case you want to type <tag> as plain text, you need to prefix it with \\ symbol . Example <color: #11dddd > %player:displayname% </color> <dark_gray> \u00bb </dark_gray> <color: #cccccc > ${message} <red> Hello <blue> world </blue> ! </red> <rainbow> Some colors for you There are also few self-contained tags, that don't require closing ones. They can also take arguments in the same way to previous ones. Few examples: <lang: 'item.minecraft.diamond' > <reset>","title":"Structure"},{"location":"user/text-format/#list-of-available-tags","text":"Here is list of all default tags available. Other mods can add new or limit usage of existing ones, so not every might work in yours case.","title":"List of available tags"},{"location":"user/text-format/#colors","text":"Note This tag should be closed. By default, there are multiple tags representing colors. They use their vanilla name or (additional aliases). The current list includes: <yellow> , <dark_blue> , <dark_purple> , <gold> , <red> , <aqua> , <gray> , <light_purple> , <white> , <dark_gray> , <green> , <dark_green> , <blue> , <dark_aqua> , <dark_green> , <black> There is also a universal <color: [value] > and <c: [value] > tags, in which you can replace [value] with vanilla color name or an rgb color starting with # (for example <color: #AABBCC > )","title":"Colors"},{"location":"user/text-format/#decorations","text":"Note This tag should be closed. These tags allow decorating text, they are quite simple. <strikethrough> / <st> - Makes the text strikethrough, <underline> / <underlined> - Underlines the text, <italic> / <i> - Makes the text italic, <obfuscated> / <obf> - Obfuscates the text (matrix effect), <bold> / <b> - Makes the text bold,","title":"Decorations"},{"location":"user/text-format/#click-events","text":"Note This tag should be closed. Danger They should be however limited to admin usage only, as they can do harm if accessible by normal players. Click events allows making text more interactive. There are few available actions: <click:open_url: [value] > / <open_url: [value] > / <url: [value] > - Opens the provided url <click:run_command: [value] > / <run_cmd: [value] > - Runs a command as the player <click:suggest_command: [value] > / <suggest_command: [value] > / <cmd: [value] > - Suggests a command to the player <click:copy_to_clipboard: [value] > / <copy_to_clipboard: [value] > / <copy: [value] > - Copies text to the clipboard <click:change_page: [value] > / <change_page: [value] > / <page: [value] > - Changes the page in a book [value] needs to be replaced with targeted value, for example 'gamemode creative'","title":"Click events"},{"location":"user/text-format/#hover","text":"Hover tag allows adding simple hover on text. It can be used to display additional information. Note This tag should be closed. <hover:show_text: [value] > / <hover: [value] > - Adds a simple text hover ( [value] uses the same formatting as rest) <hover:show_item: [value] > - Adds a simple ItemStack hover ( [value] is item in sNBT format) <hover:show_entity: [type]:[UUID]:'Display Name' > - Adds an entity hover. (The colon ( : ) in the entity type needs to be replaced with \\: . For example, <hover:show_entity:minecraft \\:bee:[UUID]:'Display Name' > )","title":"Hover"},{"location":"user/text-format/#fonts","text":"Note This tag should be closed. This tag allows you to change font to any build in one or one provided by resource pack. You can use it by simply adding <font: [value] > , where [value] is just a font name. Minecraft has 3 build-in fonts: default , uniform and alt .","title":"Fonts"},{"location":"user/text-format/#inserting","text":"Note This tag should be closed. This tag creates a clickable text, that inserts its value at the end of player's chat message. You can use it by writing <insert: [value] > , where [value] inserted text (should be wrapped in ' ).","title":"Inserting"},{"location":"user/text-format/#translations","text":"Note This tag is self containing, so it doesn't contain a closing tag. Translations tag allows you to insert a text from a lang file (including ones parsed on servers by some mods). You use it with <lang: [key]:[optional arg 1]:[optional arg 1]:... > , where [key] is a translation key and [optional arg X] are optional, fully formatted arguments you can pass.","title":"Translations"},{"location":"user/text-format/#control-keys","text":"Control Keys You can find a list of control keys on the Minecraft Wiki Note This tag is self containing, so it doesn't contain a closing tag. This tag allows you to add information about player control keys, with respecting of theirs configuration. You can use it with <keybind: [value] > , where [value] is a control key used.","title":"Control keys"},{"location":"user/text-format/#gradients","text":"This tag allows you to add gradients to the text. However, it has multiple limitation that can block its usage. Currently, you can't use dynamic values (translations, control keys, placeholders, etc) within them, as they require static text. There 2 types of gradients: <gradient: [color 1]:[color 2]:... > / <gr: [color 1]:[color 2]:... > - I can take multiple colors to move between them smoothly. <hard_gradient: [color 1]:[color 2]:... > / <hgr: [color 1]:[color 2]:... > - I can take multiple colors to move between them without mixing them. <rainbow: [frequency]:[saturation]:[offset] > / <rb: [...] > - It's simple rainbow gradient. All arguments are optional ( <ranbow> is still valid) and they take numbers between 0 and 1 ( 0.3 for example)","title":"Gradients"},{"location":"user/text-format/#reset","text":"<reset> and <r> are special, self-contained tags which close all previous formatting. They are useful in cases, where you want to close multiple formatting tags quickly","title":"Reset"}]}